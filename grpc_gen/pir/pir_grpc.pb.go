// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.21.3
// source: idl/pir.proto

package pir

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PirSrvClient is the client API for PirSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PirSrvClient interface {
	QueryPi(ctx context.Context, in *PirQueryRequest, opts ...grpc.CallOption) (*PirQueryResponse, error)
	Refresh(ctx context.Context, in *PirRefreshRequest, opts ...grpc.CallOption) (*PirRefreshResponse, error)
}

type pirSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewPirSrvClient(cc grpc.ClientConnInterface) PirSrvClient {
	return &pirSrvClient{cc}
}

func (c *pirSrvClient) QueryPi(ctx context.Context, in *PirQueryRequest, opts ...grpc.CallOption) (*PirQueryResponse, error) {
	out := new(PirQueryResponse)
	err := c.cc.Invoke(ctx, "/pir.PirSrv/QueryPi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pirSrvClient) Refresh(ctx context.Context, in *PirRefreshRequest, opts ...grpc.CallOption) (*PirRefreshResponse, error) {
	out := new(PirRefreshResponse)
	err := c.cc.Invoke(ctx, "/pir.PirSrv/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PirSrvServer is the server API for PirSrv service.
// All implementations must embed UnimplementedPirSrvServer
// for forward compatibility
type PirSrvServer interface {
	QueryPi(context.Context, *PirQueryRequest) (*PirQueryResponse, error)
	Refresh(context.Context, *PirRefreshRequest) (*PirRefreshResponse, error)
	mustEmbedUnimplementedPirSrvServer()
}

// UnimplementedPirSrvServer must be embedded to have forward compatible implementations.
type UnimplementedPirSrvServer struct {
}

func (UnimplementedPirSrvServer) QueryPi(context.Context, *PirQueryRequest) (*PirQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPi not implemented")
}
func (UnimplementedPirSrvServer) Refresh(context.Context, *PirRefreshRequest) (*PirRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedPirSrvServer) mustEmbedUnimplementedPirSrvServer() {}

// UnsafePirSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PirSrvServer will
// result in compilation errors.
type UnsafePirSrvServer interface {
	mustEmbedUnimplementedPirSrvServer()
}

func RegisterPirSrvServer(s grpc.ServiceRegistrar, srv PirSrvServer) {
	s.RegisterService(&PirSrv_ServiceDesc, srv)
}

func _PirSrv_QueryPi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PirQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PirSrvServer).QueryPi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pir.PirSrv/QueryPi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PirSrvServer).QueryPi(ctx, req.(*PirQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PirSrv_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PirRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PirSrvServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pir.PirSrv/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PirSrvServer).Refresh(ctx, req.(*PirRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PirSrv_ServiceDesc is the grpc.ServiceDesc for PirSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PirSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pir.PirSrv",
	HandlerType: (*PirSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPi",
			Handler:    _PirSrv_QueryPi_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _PirSrv_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/pir.proto",
}
